# This R environment comes with many helpful analytics packages installed
# It is defined by the kaggle/rstats Docker image: https://github.com/kaggle/docker-rstats

library(tidyverse) # metapackage of all tidyverse packages

# Input data files are available in the read-only "../input/" directory

list.files(path = "../input")


#import the csv datasets
#df_name <- read_csv(dataset_location)

Cyclistic_2022 <- read_csv ("/kaggle/input/google-capstone-project-cyclistic-bike-share/Cyclistic_dataset_2022.csv")

colnames(Cyclistic_2022)

str(Cyclistic_2022)

Renaming the columns ride_id, ridable_type, start_at, end_at, start_station_name, start_station_id, end_station_name, end_station_id,member_casual to trip_id, bike_id, start_time, end_time, from_station_name, from_station_id, to_station_name, to_station_id, usertype respectively for better understanding.


(Cyclistic_2022 <- rename (Cyclistic_2022
                   ,trip_id = ride_id 
                   ,bikeid = rideable_type 
                   ,start_time = started_at
                   ,end_time = ended_at
                   ,from_station_name = start_station_name 
                   ,from_station_id = start_station_id
                   ,to_station_name = end_station_name
                   ,to_station_id = end_station_id
                   ,usertype = member_casual))


#wday() extracts the DAY from the OBJECT(usually SELECTED from a column in a dataframe) with the date format.

Cyclistic_2022$day_of_week <- wday(Cyclistic_2022$start_time, label = T, abbr = T)


#difftime() calculates the time difference between column and another within a dataframe with a date format.

Cyclistic_2022$ride_length <- difftime(Cyclistic_2022$end_time, Cyclistic_2022$start_time, units ='sec')


#POSIXct extracts a certain TIME HOUR FORMAT from an OBJECT (which is usually formatted as a date/time format)

Cyclistic_2022$starting_hour <- format(as.POSIXct(Cyclistic_2022$start_time), '%H')


#format() is used to convert one datatype into another. Must be used with datatypes/date formats

Cyclistic_2022$month <- format(as.Date(Cyclistic_2022$start_time), '%m')


Next step of cleaning process is to remove any columns where ride_lenght is negative. Since data is being removed, I'm creating a new version of the dataframe (Cyclistic_2022_v2)


Cyclistic_2022_v2 <- Cyclistic_2022[!(Cyclistic_2022$ride_length<=0),]


# analyzing ridership data by type and weekday

Cyclistic_2022_v2 %>% 
  mutate(weekday = wday(start_time, label = TRUE)) %>%      #creates weekday field using wday()
  group_by(usertype, weekday) %>%                           #groups by usertype and weekday
  summarise(number_of_rides = n()                           #calculates the number of rides and average duration 
  ,average_duration = mean(ride_length)) %>%                # calculates the average duration
  arrange(usertype, weekday)                                # sorts



# Number of rides by rider type by day of the week

options(scipen = 999)
  ggplot(data = Cyclistic_2022_v2) +
  aes(x = day_of_week, fill = usertype) +
  geom_bar(position = "dodge")
  labs(x = 'Day of the week', y = 'Number of rides', fill = 'User type', title = 'Number of rides by rider type')
ggsave("number_of_rides_by_rider_type.png")



# Number of rides per month

ggplot(data = Cyclistic_2022_v2) +
  aes(x = month, fill = usertype) +
  geom_bar(position = 'dodge') +
  labs(x = 'Month', y = 'Number of rides', fill = 'Member type', title = 'Number of rides per month')
ggsave("number_of_rides_per_month.png")



# Number of rides by bike type

ggplot(data = Cyclistic_2022_v2) +
   aes(x = bikeid, fill = usertype) +
  geom_bar(position = 'dodge') +
  labs(x = 'Bike type', y = 'Number of rides', fill = 'Member type', title = 'Number of rides by bike type')
ggsave("number_of_rides_by_bike_type.png")



# Hourly usage by day of the week

ggplot(data = Cyclistic_2022_v2) +
  aes(x = starting_hour, fill = usertype) +
  facet_wrap(~day_of_week) +
  geom_bar() +
  labs(x = 'Starting hour', y = 'Number of rides', fill = 'Member type', title = 'Hourly use of bikes throughout the week') +
  theme(axis.text = element_text(size = 5))
ggsave("Hourly_use_of_bikes_throughout_the_week.png", dpi = 1000)


Checking top 10 to and from stations for better suggestions/future campaions.


member_rider_df <- filter(Cyclistic_2022_v2, usertype=='member')
count(member_rider_df, from_station_name, sort = T)
count(member_rider_df, to_station_name, sort = T)

casual_rider_df <- filter(Cyclistic_2022_v2, usertype=='casual')
count(casual_rider_df, from_station_name, sort = T)
count(casual_rider_df, to_station_name, sort = T)
